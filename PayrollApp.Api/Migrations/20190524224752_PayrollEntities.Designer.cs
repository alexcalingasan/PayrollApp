// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PayrollApp.Api.Data;

namespace PayrollApp.Api.Migrations
{
    [DbContext(typeof(PayrollContext))]
    [Migration("20190524224752_PayrollEntities")]
    partial class PayrollEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PayrollApp.Api.Data.Entities.AdditionalDeduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Description");

                    b.Property<int>("EmployeeId");

                    b.Property<bool>("IsArchived");

                    b.Property<int>("PayrollId");

                    b.Property<int>("PayslipId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayrollId");

                    b.HasIndex("PayslipId");

                    b.ToTable("AdditionalDeductions");
                });

            modelBuilder.Entity("PayrollApp.Api.Data.Entities.AdditionalPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Description");

                    b.Property<int>("EmployeeId");

                    b.Property<bool>("IsArchived");

                    b.Property<int>("PayrollId");

                    b.Property<int>("PayslipId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayrollId");

                    b.HasIndex("PayslipId");

                    b.ToTable("AdditionalPayments");
                });

            modelBuilder.Entity("PayrollApp.Api.Data.Entities.Deduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Absences");

                    b.Property<decimal?>("AbsentDay");

                    b.Property<decimal?>("CashAdvance");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<int>("EmployeeId");

                    b.Property<decimal?>("HDMF");

                    b.Property<decimal?>("HDMFLoan");

                    b.Property<bool>("IsArchived");

                    b.Property<decimal?>("LateHour");

                    b.Property<decimal?>("LateMinute");

                    b.Property<decimal?>("Lates");

                    b.Property<int>("PayrollId");

                    b.Property<int>("PayslipId");

                    b.Property<decimal?>("PhilHealth");

                    b.Property<decimal?>("SSS");

                    b.Property<decimal?>("SSSLoan");

                    b.Property<decimal?>("Total");

                    b.Property<decimal?>("WithholdingTax");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayrollId");

                    b.HasIndex("PayslipId")
                        .IsUnique();

                    b.ToTable("Deductions");
                });

            modelBuilder.Entity("PayrollApp.Api.Data.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("EmployeeNumber");

                    b.Property<int>("EmploymentStatus");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("PayrollApp.Api.Data.Entities.Payroll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsArchived");

                    b.Property<DateTime>("PayDay");

                    b.Property<decimal?>("StaffSalary");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Payrolls");
                });

            modelBuilder.Entity("PayrollApp.Api.Data.Entities.Payslip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<int>("EmployeeId");

                    b.Property<bool>("IsArchived");

                    b.Property<int>("PayrollId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayrollId");

                    b.ToTable("Payslips");
                });

            modelBuilder.Entity("PayrollApp.Api.Data.Entities.SalaryComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("DailyCola");

                    b.Property<decimal?>("DailyRate");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<int>("EmployeeId");

                    b.Property<bool>("IsArchived");

                    b.Property<decimal?>("OrdinaryDays");

                    b.Property<decimal?>("OrdinaryDaysPay");

                    b.Property<int>("PayrollId");

                    b.Property<int>("PayslipId");

                    b.Property<decimal?>("RegularHoliday");

                    b.Property<decimal?>("RegularHolidayPay");

                    b.Property<decimal?>("RestDay");

                    b.Property<decimal?>("RestDayPay");

                    b.Property<decimal?>("RestDayRegularHoliday");

                    b.Property<decimal?>("RestDayRegularHolidayPay");

                    b.Property<decimal?>("RestDaySpecialHoliday");

                    b.Property<decimal?>("RestDaySpecialHolidayPay");

                    b.Property<decimal?>("SalaryRate");

                    b.Property<decimal?>("SpecialHoliday");

                    b.Property<decimal?>("SpecialHolidayPay");

                    b.Property<decimal?>("Total");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayrollId");

                    b.HasIndex("PayslipId");

                    b.ToTable("SalaryComponents");
                });

            modelBuilder.Entity("PayrollApp.Api.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PayrollApp.Api.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PayrollApp.Api.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PayrollApp.Api.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PayrollApp.Api.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PayrollApp.Api.Data.Entities.AdditionalDeduction", b =>
                {
                    b.HasOne("PayrollApp.Api.Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PayrollApp.Api.Data.Entities.Payroll", "Payroll")
                        .WithMany()
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PayrollApp.Api.Data.Entities.Payslip", "Payslip")
                        .WithMany("AdditionalDeductions")
                        .HasForeignKey("PayslipId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PayrollApp.Api.Data.Entities.AdditionalPayment", b =>
                {
                    b.HasOne("PayrollApp.Api.Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PayrollApp.Api.Data.Entities.Payroll", "Payroll")
                        .WithMany()
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PayrollApp.Api.Data.Entities.Payslip", "Payslip")
                        .WithMany("AdditionalPayments")
                        .HasForeignKey("PayslipId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PayrollApp.Api.Data.Entities.Deduction", b =>
                {
                    b.HasOne("PayrollApp.Api.Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PayrollApp.Api.Data.Entities.Payroll", "Payroll")
                        .WithMany()
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PayrollApp.Api.Data.Entities.Payslip", "Payslip")
                        .WithOne("Deduction")
                        .HasForeignKey("PayrollApp.Api.Data.Entities.Deduction", "PayslipId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PayrollApp.Api.Data.Entities.Employee", b =>
                {
                    b.HasOne("PayrollApp.Api.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PayrollApp.Api.Data.Entities.Payslip", b =>
                {
                    b.HasOne("PayrollApp.Api.Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PayrollApp.Api.Data.Entities.Payroll", "Payroll")
                        .WithMany("Payslips")
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PayrollApp.Api.Data.Entities.SalaryComponent", b =>
                {
                    b.HasOne("PayrollApp.Api.Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PayrollApp.Api.Data.Entities.Payroll", "Payroll")
                        .WithMany()
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PayrollApp.Api.Data.Entities.Payslip", "Payslip")
                        .WithMany("SalaryComponents")
                        .HasForeignKey("PayslipId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
